from sympy import *

# Want volume integrals
# int_V 1 dV
# int_V X dV
# int_V Y dV
# int_V Z dV
# int_V XY dV
# int_V YZ dV
# int_V XZ dV

# Prepare to apply for divergence theorem
# 1 = div [X, 0, 0]
# X = div [0, XY, 0]
# Y = div [0, 0, YZ]
# Z = div [XZ, 0, 0]
# XX = div [0, XXY, 0]
# YY = div [0, 0, YYZ]
# ZZ = div [XZZ, 0, 0]
# XY = div [0, 0, XYZ]
# YZ = div [XYZ, 0, 0]
# XZ = div [0, XYZ, 0]

# Apply divergence theorem
# int_V  1 dV = int_S   X * n.x dS
# int_V  X dV = int_S  XY * n.y dS
# int_V  Y dV = int_S  YZ * n.z dS
# int_V  Z dV = int_S  XZ * n.x dS
# int_V XX dV = int_S XXY * n.y dS
# int_V YY dV = int_S YYZ * n.z dS
# int_V ZZ dV = int_S XZZ * n.x dS
# int_V XY dV = int_S XYZ * n.z dS
# int_V YZ dV = int_S XYZ * n.x dS
# int_V XZ dV = int_S XYZ * n.y dS

# Compute contribution from each triangle to surface integral

# Inputs
# x1, y1, z1
# x2, y2, z2
# x3, y3, z3

x1, y1, z1 = symbols('x1 y1 z1')
x2, y2, z2 = symbols('x2 y2 z2')
x3, y3, z3 = symbols('x3 y3 z3')

p1, p2 = symbols('p1 p2')
p3 = 1 - p1 - p2

X = p1 * x1 + p2 * x2 + p3 * x3
Y = p1 * y1 + p2 * y2 + p3 * y3
Z = p1 * z1 + p2 * z2 + p3 * z3

e1 = Matrix([x2-x1,y2-y1,z2-z1])
e2 = Matrix([x3-x1,y3-y1,z3-z1])
cp = e1.cross(e2)
A2 = cp.norm()
n = cp / A2

# Outputs

fns = [
    ("I_1",
     A2*integrate(integrate(X*n.row(0),(p2,0,1-p1)), (p1,0,1))[0,0]),
    ("I_x",
     A2*integrate(integrate(X*Y*n.row(1),(p2,0,1-p1)), (p1,0,1))[0,0]),
    ("I_y",
     A2*integrate(integrate(Y*Z*n.row(2),(p2,0,1-p1)), (p1,0,1))[0,0]),
    ("I_z",
     A2*integrate(integrate(X*Z*n.row(0),(p2,0,1-p1)), (p1,0,1))[0,0]),
    ("I_xx",
     A2*integrate(integrate(X*X*Y*n.row(1),(p2,0,1-p1)), (p1,0,1))[0,0]),
    ("I_yy",
     A2*integrate(integrate(Y*Y*Z*n.row(2),(p2,0,1-p1)), (p1,0,1))[0,0]),
    ("I_zz",
     A2*integrate(integrate(X*Z*Z*n.row(0),(p2,0,1-p1)), (p1,0,1))[0,0]),
    ("I_xy",
     A2*integrate(integrate(X*Y*Z*n.row(2),(p2,0,1-p1)), (p1,0,1))[0,0]),
    ("I_xz",
     A2*integrate(integrate(X*Y*Z*n.row(1),(p2,0,1-p1)), (p1,0,1))[0,0]),
    ("I_yz",
     A2*integrate(integrate(X*Y*Z*n.row(0),(p2,0,1-p1)), (p1,0,1))[0,0])
]

print("// This code is generated by massmatrix.py")
print("#include <cmath>")

for name, expr in fns:
    print(f"double {name}(double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3)" + " {")
    print(f"return {ccode(expr)};")
    print("}")
