#ifndef PLYGRD_DISTANCE_H
#define PLYGRD_DISTANCE_H

#include <Eigen/Eigen>

// Implementations are generated by distance.py

// Keep this in sync with distance.py value
constexpr double dh = 0.001;

double barrier(double d);
double d_barrier(double d);
double dd_barrier(double d);

double d2_pp(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d a,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d b);

double d2_pp_ip(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d a,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d b);

Eigen::VectorXd d2_pp_grad(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d a,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d b);

Eigen::MatrixXd d2_pp_hess(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d a,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d b);

double d2_pe(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p1,
    Eigen::Vector3d p2);

double d2_pe_ip(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p1,
    Eigen::Vector3d p2);

Eigen::VectorXd d2_pe_grad(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p1,
    Eigen::Vector3d p2);

Eigen::MatrixXd d2_pe_hess(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p1,
    Eigen::Vector3d p2);

double d2_pt(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p1,
    Eigen::Vector3d p2,
    Eigen::Vector3d p3);

double d2_pt_ip(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p1,
    Eigen::Vector3d p2,
    Eigen::Vector3d p3);

Eigen::VectorXd d2_pt_grad(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p1,
    Eigen::Vector3d p2,
    Eigen::Vector3d p3);

Eigen::MatrixXd d2_pt_hess(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p1,
    Eigen::Vector3d p2,
    Eigen::Vector3d p3);

double d2_ee(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p11,
    Eigen::Vector3d p12,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p21,
    Eigen::Vector3d p22);

double d2_ee_ip(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p11,
    Eigen::Vector3d p12,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p21,
    Eigen::Vector3d p22);

Eigen::VectorXd d2_ee_grad(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p11,
    Eigen::Vector3d p12,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p21,
    Eigen::Vector3d p22);

Eigen::MatrixXd d2_ee_hess(
    Eigen::Vector<double,12> q1,
    Eigen::Vector3d p11,
    Eigen::Vector3d p12,
    Eigen::Vector<double,12> q2,
    Eigen::Vector3d p21,
    Eigen::Vector3d p22);

#endif  // PLYGRD_DISTANCE_H